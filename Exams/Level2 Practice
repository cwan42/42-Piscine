Assignment name  : aff_a
Expected files   : aff_a.c
Allowed functions: write
Write a program that takes a string, and displays the first 'a' character it
encounters in it, followed by a newline. If there are no 'a' characters in the
string, the program just writes a newline. If the number of parameters is not
1, the program displays 'a' followed by a newline.
Example:
$> ./aff_a "abc" | cat -e
a$
$> ./aff_a "dubO a POIL" | cat -e
a$
$> ./aff_a "zz sent le poney" | cat -e
$
$> ./aff_a | cat -e
a$

#include <unistd.h>

int  main(int argc, **argv)
{
    int  i;
    i = 0;

    if (argc > 1)
    {
        while (argv[1][i] != '\0')
        {
            if (argv[1][i] == 'a')
            {
                write (1, "a\n", 2);
                return (0);
            }
            i++;
        }
        write (1, "\n", 1);
        return (0);
    }
    write (1, "a\n", 2);
    return (0);
}

Assignment name  : aff_first_param
Expected files   : aff_first_param.c
Allowed functions: write
Write a program that takes strings as arguments, and displays its first
argument followed by a \n.
If the number of arguments is less than 1, the program displays \n.
Example:
$> ./aff_first_param vincent mit "l'ane" dans un pre et "s'en" vint | cat -e
vincent$
$> ./aff_first_param "j'aime le fromage de chevre" | cat -e
j'aime le fromage de chevre$
$> ./aff_first_param
$

#include <unistd.h>

int    main(int argc, char **argv)
{
        int    i;

        i = 0;
        if (argc > 1)
        {
            while (argv[1][i] != '\0')
            {
                write (1, &arg[1][i], 1);
                i++;
            }
            write (1, "\n", 1);
            return (0);
        }
        write (1, "\n", 1);
        return (0);
}

Assignment name  : aff_last_param
Expected files   : aff_last_param.c
Allowed functions: write
Write a program that takes strings as arguments, and displays its last
argument followed by a newline.
If the number of arguments is less than 1, the program displays a newline.
Examples:
$> ./aff_last_param "zaz" "mange" "des" "chats" | cat -e
chats$
$> ./aff_last_param "j'aime le savon" | cat -e
j'aime le savon$
$> ./aff_last_param
$

#include <unistd.h>

int    main(int argc, char **argv)
{
        int    i;

        i = 0;
        if (argc > 1)
        {
            while (argv[argc - 1][i] != '\0')
            {
                write (1, &argv[argc - 1][i], 1);
                i++;
            }
            write (1, "\n", 1);
            return (0);
        }
        write (1, '\n', 1);
        return (0);
}
