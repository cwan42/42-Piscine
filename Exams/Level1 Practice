Assignment name  : ft_swap
Expected files   : ft_swap.c
Allowed functions: 
Write a function that swaps the contents of two integers the adresses of which
are passed as parameters.
Your function must be declared as follows:
void	ft_swap(int *a, int *b);

void  ft_swap(int *a, int *b)
{
      int  c;

      *c = *a;
      *a = *b;
      *b = c;
}
/*
#include <stdio.h>
int  main()
{
      int  x = 1;
      int  y = 2;

      ft_swap(&x, &y);
      printf("%d,%d\n", x, y);
}
*/

Assignment name  : ft_putstr
Expected files   : ft_putstr.c
Allowed functions: write
Write a function that displays a string on the standard output.
The pointer passed to the function contains the address of the string's first
character.
Your function must be declared as follows:
void	ft_putstr(char *str);

#include <unistd.h>

void	ft_putstr(char *str)
{
	int i;

	i = 0;
	while(str[i] !='\0')
	{
		write(1,&str[i], 1);
		i++;
	}
	write(1, "\n", 1);
}
/*
int	main()
{
	char myString[]= "Poopalicious Rex!";
	
	ft_putstr(myString);
	return 0;
}
*/

Assignment name  : ft_strlen
Expected files   : ft_strlen.c
Allowed functions: 
Write a function that returns the length of a string.
Your function must be declared as follows:
int	ft_strlen(char *str);

int	ft_strlen(char *str)
{	
	int i = 0;
	while(str[i] != '\0')
		i++;
	return (i);
}
/*
#include <stdio.h>

int	main(void)
{
    char str[] = "Teststring";

    printf("%d\n", ft_strlen(str));
    return (0);
}
*/

Assignment name  : ft_strcpy
Expected files   : ft_strcpy.c
Allowed functions: 
Reproduce the behavior of the function strcpy (man strcpy).
Your function must be declared as follows:
char    *ft_strcpy(char *s1, char *s2);

char	*ft_strcpy(char *s1, char *s2)
{
	int	i;

	i = 0;
	while (s2[i] != '\0')
	{
		s1[i] = s2[i];
		i++;
	}
	s1[i] = '\0';
	return (s1);
}
/*
#include <stdio.h>
{
	char s1[] = "String 1";
	char s2[] = "String 2etc";

	printf("%s %s\n", s1 , s2);
	printf("%s %s\n", ft_strcpy(s1, s2), s2);
	return (0);
}
*/

Assignment name  : repeat_alpha
Expected files   : repeat_alpha.c
Allowed functions: write
Write a program called repeat_alpha that takes a string and display it
repeating each alphabetical character as many times as its alphabetical index,
followed by a newline.
'a' becomes 'a', 'b' becomes 'bb', 'e' becomes 'eeeee', etc...
Case remains unchanged.
If the number of arguments is not 1, just display a newline.
Examples:
$>./repeat_alpha "abc"
abbccc
$>./repeat_alpha "Alex." | cat -e
Alllllllllllleeeeexxxxxxxxxxxxxxxxxxxxxxxx.$
$>./repeat_alpha 'abacadaba 42!' | cat -e
abbacccaddddabba 42!$
$>./repeat_alpha | cat -e
$
$>
$>./repeat_alpha "" | cat -e
 if $
$>

#include <unistd.h>

char    repeat_alpha(char *str)
{
        int    i;
        int    letter;

        i = 0;
        letter = 0;
        while (str[i] !='\0'(
        {
            if (str[i] >= 65 && str[i] <= 90)
            {
                letter = str[i] -65;
                while (letter >= 0)
                {
                    write(1, &str[i], 1);
                    letter--;
                }
            }
            else if (str[i] >= 97 && str[i] <= 122)
            {
                letter = str[i] -97;
                while (letter >=0)
                {
                    write(1, &str[i], 1);
                    letter--;
                }
            }
            else
                write(1, &str[i], 1);
            i++;
        }
        write(1, "\n", 1);
}
/*
void    main(void)
{
        repeat_alpha("Str here 123");
}

Assignment name  : search_and_replace
Expected files   : search_and_replace.c
Allowed functions: write, exit
Write a program called search_and_replace that takes 3 arguments, the first 
arguments is a string in which to replace a letter (2nd argument) by
another one (3rd argument).
If the number of arguments is not 3, just display a newline.
If the second argument is not contained in the first one (the string)
then the program simply rewrites the string followed by a newline.
Examples:
$>./search_and_replace "Papache est un sabre" "a" "o"
Popoche est un sobre
$>./search_and_replace "zaz" "art" "zul" | cat -e
$
$>./search_and_replace "zaz" "r" "u" | cat -e
zaz$
$>./search_and_replace "jacob" "a" "b" "c" "e" | cat -e
$
$>./search_and_replace "ZoZ eT Dovid oiME le METol." "o" "a" | cat -e
ZaZ eT David aiME le METal.$
$>./search_and_replace "wNcOre Un ExEmPle Pas Facilw a Ecrirw " "w" "e" | cat -e
eNcOre Un ExEmPle Pas Facile a Ecrire $

#include <unistd.h>

int	ft_strlen(char *str)
{
	int	i;

	i = 0;
	while (str[i])
		i++;
	return (i);
}

int	main(int ac, char *av[])
{
	int	i;

	i = 0;
	if (ac == 4)
	{
		if (ft_strlen(av[2]) == 1 && ft_strlen(av[3]) == 1)
		{
			while (av[1][i])
			{
				if (av[1][i] == av[2][0])
					write(1, &av[3][0], 1);
				else
					write(1, &av[1][i], 1);
				i++;
			}
		}
	}
	write (1, "\n", 1);
	return (0);
}

Assignment name  : ulstr
Expected files   : ulstr.c
Allowed functions: write
Write a program that takes a string and reverses the case of all its letters.
Other characters remain unchanged.
You must display the result followed by a '\n'.
If the number of arguments is not 1, the program displays '\n'.
Examples :
$>./ulstr "L'eSPrit nE peUt plUs pRogResSer s'Il staGne et sI peRsIsTent VAnIte et auto-justification." | cat -e
l'EspRIT Ne PEuT PLuS PrOGrESsER S'iL STAgNE ET Si PErSiStENT vaNiTE ET AUTO-JUSTIFICATION.$
$>./ulstr "S'enTOuRer dE sECreT eSt uN sIGnE De mAnQuE De coNNaiSSanCe.  " | cat -e
s'ENtoUrER De SecREt EsT Un SigNe dE MaNqUe dE COnnAIssANcE.  $
$>./ulstr "3:21 Ba  tOut  moUn ki Ka di KE m'en Ka fe fot" | cat -e
3:21 bA  ToUT  MOuN KI kA DI ke M'EN kA FE FOT$
$>./ulstr | cat -e
$

#include <unistd.h>

int	main(int ac, char *av[])
{
	int	i;

	i = 0;
	if (ac == 2)
	{
		while (av[1][i])
		{
			if (av[1][i] >= 'a' && av[1][i] <= 'z')
				av[1][i] -= 32;
			else if (av[1][i] >= 'A' && av[1][i] <= 'Z')
				av[1][i] += 32;
			write(1, &av[1][i], 1);
			i++;
		}
	}
	write(1, "\n", 1);
	return (0);
}

Assignment name  : rot_13
Expected files   : rot_13.c
Allowed functions: write
Write a program that takes a string and displays it, replacing each of its
letters by the letter 13 spaces ahead in alphabetical order.
'z' becomes 'm' and 'Z' becomes 'M'. Case remains unaffected.
The output will be followed by a newline.
If the number of arguments is not 1, the program displays a newline.
Example:
$>./rot_13 "abc"
nop
$>./rot_13 "My horse is Amazing." | cat -e
Zl ubefr vf Nznmvat.$
$>./rot_13 "AkjhZ zLKIJz , 23y " | cat -e
NxwuM mYXVWm , 23l $
$>./rot_13 | cat -e
$
$>
$>./rot_13 "" | cat -e
$
$>

#include <unistd.h>

int	main(int ac, char *av[])
{
	int	i;

	i = 0;
	if (ac == 2)
	{
		while (av[1][i])
		{
			if (av[1][i] >= 'a' && av[1][i] <= 'z')
				av[1][i] = (av[1][i] - 'a' + 13) % 26 + 'a';
			else if (av[1][i] >= 'A' && av[1][i] <= 'Z')
				av[1][i] = (av[1][i] - 'A' + 13) % 26 + 'A';
			write(1, &av[1][i], 1);
			i++;
		}
	}
	write(1, "\n", 1);
	return (0);
}
