No need preamble anymore leggo..

ex00  ft_strcpy.c // Copies from src to dest, null terminate dest after

char  *ft_strcpy(char *dest, char *src) 
{
    int  i;
    while (src[i] !='\0')
    {
        dest[i] = src[i];
        i++;
    }
    dest[i] = '\0';
    return (dest);
}
/*
#include <stdio.h>

int  main(void)
{
    char  src[] = "SOURCE";
    char dest[] = "DESTINATION";

    printf("%s, %s -------", src, dest);
    ft_strcpy(dest, src);
    printf("%s, %s\n", src, dest);
    return (0);
}

ex01  ft_strncpy.c

#include <stddef.h>

char  *ft_strncpy(char *dest, char *src, unsigned int n) // strcpy up to n, null dest after
{
      size_t i;
      i = 0;

      while (i < n && src[i] != '\0')
      {
          dest[i] = src[i];
          i++;
      }
      while (i < n)
      {
          dest[i] = '\0';
          i++;
      }
      return (dest);
}
/*
#include <stdio.h>
int  main(void)
{
    char src[] = "BeFoRee";
    char dest[] = "after";
    size_t n = sizeof(dest) - 1;

    printf("%s -- %s ------", src, dest);
    ft_strncpy(dest, src, n);
    printf("%s, %s\n", src, dest);
    return (0);
}
*/

ex02  ft_str_is_alpha 

#include <stdio.h>

int    ft_str_is_alpha(const char* string)
{
        int i;

        i = 0;

        while (str[i] != '\0')
        {
            if (string[i] >= 'a' && string[i] <= 'z')
                i++;
            else if (string[i] >= 'A' && string[i] <= 'Z')
                i++;
            else
                return (0);
        }
        return (1);
}
int    main(void)
{
        char input_string[200];

        printf("Enter a string: ");
        scanf("%199s", input_string);    
        printf("%d\n", ft_str_is_alpha(input_string));
        return (0);
}
ex03  ft_str_is_numeric

int    ft_str_is_numeric(const char *string)
{
        int    i;

        i = 0;
        while (string[i] != '\0')
        {
            if (string[i] >= '0' && string[i] <= '9')
                i++;
            else
                return (0);
        }
        return (1);
}
        
ex04  ft_str_is_lowercase

int    ft_str_is_lowercase(char *str)
{
        int    i;

        i = 0;
        while (str[i] != '\0')
        {
            if (!(str[i] >= 'a' && str[i] <= 'z'))
                return (0);
            i++;
        }
        return (1);
}
       
ex05  ft_str_is_uppercase

int    ft_str_is_uppercase(char *str)
{
        int    i;

        i = 0;
        while (str[i])
        {
            if (!(str[i] >= 'A' && str[i] <= 'Z'))
                return (0);
            i++;
        }
        return (1);
}
        
ex06  ft_str_is_printable

int    ft_str_is_printable(char *str)
{
        int    i;

        i = 0;
        while (str[i])
        {
            if (!(str[i] >= 32) && (str[i] <= 126))
                return (0);
            i++;
        }
        return (1);
}
        
ex07  ft_strupcase    // convert lower to upper case

char    ft_strupcase(char *str)
{
        int    i;

        i = 0;
        while (str[i] != '\0')
        {
            if (str[i] >= 'a' && str[i] <= 'z')
                str[i] -= 32;
            i++;
        }
        return (str);
]

ex08  ft_strlowcase

char    ft_strlowcase(char *str)
{
        int    i;

        i = 0;
        while (str[i])
        {
            if (str[i] >= 'A' && str[i] <= 'Z')
                str[i] += 32;
            i++;
        }
        return (str);
}
ex09  ft_strcapitalize

char    *ft_strcapitalize(char *str)
{
        int    i;
        int    caps;

        i = 0;
        while (str[i])    // make all letters lowercase first
        {
            if (str[i] >= 65 && str[i] <= 90)
                    str[i] += 32;
            i++;
        }
        i = 0;
        caps = 1;
        while (str[i])
        {
            if (str[i] >= 97 && [stri] <= 122)
            {
                if (caps == 1)    // capitalize if letter and caps = 1
                    str[i] -= 32;
                caps = 0;
            }
            else if (str[i] >= 48 && str[i] <= 57)
                caps = 0;
            else
                caps = 1;    // set caps if i is anything but a digit
            i++;
        }
        return (str);
}

ex10  ft_strlcpy

unsigned int    ft_strlcpy(char *dest, char *src, unsigned int size)
{
        unsigned int    c;
        unsigned int    d;

        c = 0;
        d = 0;
        while (src[c])
                c++;
        if (d != '\0')
        {
            while ((src[c] != '\0') && (d < size - 1))
            {
                dest[c] = src[c];
                c++;
            }
            dest[c] = '\0'
        }
        return (c);
}

ex11  ft_putstr_non_printable

#include <unistd.h>

void    ft_putchar(char c)
{
        write(1, &c, 1);
}

int    ft_isprintable(char c)
{
        if (c >= 32 && c <= 126)
            return (1);
        else
            return (0);
}

void    ft_putstr_non_printable(char *str)
{
        int    i;

        i = 0;
        while (str[i])
        {
            if (ft_isprintable(str[i]) == 1)
                ft_putchar(str[i]);
            else
            {
                ft_putchar('\\');
                ft_putchar("0123456789abcdef"[str[i] / 16]);
                ft_putchar("0123456789abcdef"[str[i] % 16]);
            }
            i++;
        }
}

ex12  ft_print_memory
