No need preamble anymore leggo..

ex00  ft_strcpy.c // Copies from src to dest, null terminate dest after

char  *ft_strcpy(char *dest, char *src) 
{
    int  i;
    while (src[i] !='\0')
    {
        dest[i] = src[i];
        i++;
    }
    dest[i] = '\0';
    return (dest);
}
/*
#include <stdio.h>

int  main(void)
{
    char  src[] = "SOURCE";
    char dest[] = "DESTINATION";

    printf("%s, %s -------", src, dest);
    ft_strcpy(dest, src);
    printf("%s, %s\n", src, dest);
    return (0);
}

ex01  ft_strncpy.c

#include <stddef.h>

char  *ft_strncpy(char *dest, char *src, unsigned int n) // strcpy up to n, null dest after
{
      size_t i;
      i = 0;

      while (i < n && src[i] != '\0')
      {
          dest[i] = src[i];
          i++;
      }
      while (i < n)
      {
          dest[i] = '\0';
          i++;
      }
      return (dest);
}
/*
#include <stdio.h>
int  main(void)
{
    char src[] = "BeFoRee";
    char dest[] = "after";
    size_t n = sizeof(dest) - 1;

    printf("%s -- %s ------", src, dest);
    ft_strncpy(dest, src, n);
    printf("%s, %s\n", src, dest);
    return (0);
}
*/

ex02  ft_str_is_alpha 

#include <stdio.h>

int    ft_str_is_alpha(const char* string)
{
        int i;

        i = 0;

        while (str[i] != '\0')
        {
            if (string[i] >= 'a' && string[i] <= 'z')
                i++;
            else if (string[i] >= 'A' && string[i] <= 'Z')
                i++;
            else
                return (0);
        }
        return (1);
}
int    main(void)
{
        char input_string[200];

        printf("Enter a string: ");
        scanf("%199s", input_string);    
        printf("%d\n", ft_str_is_alpha(input_string));
        return (0);
}
ex03  ft_str_is_numeric

int    ft_str_is_numeric(const char *string)
{
        int    i;

        i = 0;
        while (string[i] != '\0')
        {
            if (string[i] >= '0' && string[i] <= '9')
                i++;
            else
                return (0);
        }
        return (1);
}
        
ex04  ft_str_is_lowercase

int    ft_str_is_lowercase(char *str)
{
        int    i;

        i = 0;
        while (str[i] != '\0')
        {
            if (!(str[i] >= 'a' && str[i] <= 'z'))
                return (0);
            i++;
        }
        return (1);
}
       
ex05  ft_str_is_uppercase

int    ft_str_is_uppercase(char *str)
{
        int    i;

        i = 0;
        while (str[i])
        {
            if (!(str[i] >= 'A' && str[i] <= 'Z'))
                return (0);
            i++;
        }
        return (1);
}
        
ex06  ft_str_is_printable
        
ex07  ft_strupcase        
ex08  ft_strlowcase
ex09  ft_strcapitalize
ex10  ft_strlcpy
ex11  ft_putstr_non_printable
ex12  ft_print_memory
