ex00: ft_strlen (find and returns string length)

int   ft_strlen(char *str)
{
      int      i;

      i = 0;
      while (str[i])
            i++;
      return (i);
}

ex01: ft_putstr (writes out a string)

#include <unistd.h>

void  ft_putstr(char *str)
{
      int      i;

      i = 0;
      while (str[i])
      {
            write(1 ,&str[i], 1);
            i++;
      }
}

ex02: ft_putnbr (takes char str and displays the numbers, shld be valid for any int value)

#include <unistd.h>

void  ft_putchar(char c)
{
      write(1, &c, 1);
}

void  ft_putnbr(int nb)
{
      if (nb == -2147483648)
            write (1, "-2147483648", 11);
      else if (nb < 0)
      {
            ft_putchar("-");
            nb = -nb;
            ft_putnbr(nb);
      }
      else if (nb > 9)
      {
            ft_putnbr(nb / 10);
            ft_putnbr(nb % 10);
      }
      else
            ft_putchar(nb + 48);
}

ex03: ft_atoi (converts and express 0-9 char as integer values, process -+ correctly, disregard nonprintable)
int   ft_atoi(char *str)
{
      int  i;
      int  i2;
      int  result;

      i = 0;
      i2 = 1;
      result = 0;
      while ((str[i] >= '\t' && str[i] <= '\r') || (str[i] == ' ')) // Skip past ASCII 9 - 13 and 32
            i++;
      while (str[i] == '+' || str[i] == '-')
      {
            if (str[i] == '-')
                i2 *= -1;                            //if - encountered, *= -1 to change polarity
            i++;
      }
      while (str[i] >= '0' && str[i] <= '9')
      {
            result = (str[i] - 48) + (result * 10);
            i++;
      }
      while (str[i] != '\0')
      {
            if (str[i] < '0' || str[i] > '9')
                  return(0);
            i++;
      }
      return (result * i2);              // multiply by i2 which flags + or -
}

ex04: ft_putnbr_base      //displays number in a different base system, can handle -

#include <unistd.h>

int   ft_str_pol(char *base)
{
      int      i;

      i = 0;
      while (base[i])
      {
            if ((base[i]) != '+' && (base[i]) != '-')
                  i++;
            else
                  return (0);
      }
      return (1);
}

int   ft_same_char(char *base)
{
      int      i;
      int      j;

      i = 0;
      while (base[i])
      {
            j = i + 1;
            while (base[j])
            {
                  if (base[i] == base[j])
                        return (0);
                  else
                        j++;
            }
            i++;
      }
      return (1);
}

unsigned int      ft_strlen(char *str)
{
      unsigned int      i;

      i = 0;
      while (str[i])
            i++;
      return (i);
}

void  ft_putnbr(int nbr, unsigned int len_base, char *base)
{
      unsigned int      a;

      if (nbr < 0)
      {
            a = -nbr;
            write(1, "-", 1);
      }
      else
            a = nbr;
      if (a >= len_base)
      {
            ft_putnbr((a / len_base), len_base, base);
            ft_putnbr((a % len_base), len_base, base);
      }
      else
            write(1, &base[a], 1);
}

void  ft_putnbr_base(int nbr, char *base)
{
      unsigned int      len_base;

      len_base = ft_strlen(base);
      if (len_base < 2)
            return;
      if (ft_str_pol(base) == 0)
            return;
      if (ft_same_char(base) == 0)
            return;
      ft_putnbr(nbr, len_base, base);
}
