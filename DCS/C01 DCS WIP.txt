All ex assumes correctly created directory and file for submission

IMPORTANT NOTES READ OVER AND OVER:
Ensure no forbidden functions are used. Considered cheating, -42 marks.
Only submit main() function IF ex asks for a PROGRAM.
Moulinette uses -wall -wextra -werror, uses cc
Norme command: Norminette -R CheckForbiddenSourceHeader FILENAME

ex00: ft_ft
void	ft_ft(int *nbr)
{
	*nbr = 42;
}
/*
#include <stdio.h>
int	main()
{
	int *nbr;
	int num;

	nbr = &num;
	ft_ft(nbr);
	printf("%d\n", num);
}
*/

ex01: ft_ultimate_ft
void	ft_ultimate_ft(int *********nbr)
{
	*********nbr = 42;
}
/*
#include <stdio.h>
int	main()
{
	int n = 1;
	int *nbr1 = &n;
	int **nbr2 = &nbr1;
	int ***nbr3 = &nbr2;
	int ****nbr4 = &nbr3;
	int *****nbr5 = &nbr4;
	int ******nbr6 = &nbr5;
	int *******nbr7 = &nbr6;
	int ********nbr8 = &nbr7;
	int *********nbr = &nbr8;

	ft_ultimate_ft(nbr);
	printf("%d\n", n);
}
*/

ex02: ft_swap
void	ft_swap(int *a, int *b)
{
	int c =*a;
	*a = *b;
	*b = c;
}
/*
#include <stdio.h>
int	main()
{
	int x = 1;
	int y = 2;

	ft swap(&x, &y);
	printf("Orig value 1 and 2, swopped now %d,%d\n", x, y);
}
*/

ex03: ft_div_mod
void	ft_div_mod(int a, int b, int *div, int *mod)
{
	*div = a / b;
	*mod = a % b;
}
/*
#include <stdio.h>
int	main()
{
	int x = 10;
	int y = 5;
	int divided, modulo;
	ft_div_mod(x, y, &divided, &modulo);
	printf("%d divided by %d results in %d, with a remainder of %d\n", x, y, divided, modulo);
}
*/

ex04: ft_ultimate_div_mod

void	ft_ultimate_div_mod(int *a, int *b)
{
	int	div;
	int	mod;

	div = *a / *b;
	mod = *a % *b;
	*a = div;
	*b = mod;
}
/*
#include <stdio.h>
int	main(void)
{
	int	x = 10;
	int	y = 5;

	ft_ultimate_div_mod(&x, &y);
	printf("%d, %d\n", x, y);
	return (0);
}
*/

ex05: ft_putstr

#include <unistd.h>

void  ft_putchar(char c)
{
      write(1, &c, 1);
}

void  ft_putstr(char *str)
{
      int i;

      i = 0;
      while (str[i] != '\n')
      {
            ft_putchar(str[i]);
            i++;
      }
}

/*
int  main(void)
{
      ft_putstr("Poop on a stick!\n");
      return (0);
}
*/

ex06: ft_strlen

int	ft_strlen(char *str)
{
	int i;

	i = 0;
	while (str[i] != '\0')
	{
		i++;
	}
	return (i);
}
/*
#include <stdio.h>
int	main(void)
{
	char *c = "String test count should return 36?\n";
	printf("Total char count is %d\n", ft_strlen(c));
	return (0);
}
*/

ex07: ft_rev_int_tab

void	ft_rev_int_tab(int *tab, int size)
{
	int i;
	int temp;

	i = 0;
	while (i < (size / 2))
	{
		temp = tab[i];
		tab[i] = tab[size - 1 - i];
		tab [size -1 - i] = temp;
		i++;
	}
}
/*
#include <stdio.h>
int	main(void)
{
	int tab[] = {0, 1, 2, 3, 4}; //[]auto assign
	int size = [5]; //manual init

	ft_rev_int_tab(tab, size);
	printf("%d%d%d%d%d", tab[0], tab[1], tab[2], tab[3], tab[4];
	return (0);
}
*/

ex08: ft_sort_int_tab

void	ft_sort_int_tab(int *tab, int size)
{
	int i;
	int temp;

	while (size >= 0)
	{
		i = 0;
		while (i < size - 2)
		{
			if (tab[i] > tab[i + 1])
			{
				temp = tab[i];
				tab[i] = tab[i + 1];
				tab [i + 1] = temp;
			}
			i++;
		}
		size--;
	}
}
/*
#include <stdio.h>
int	main(void)
{
	int tab[6] = {7, 3, 5, 1, 9, 11};
	int size = 6;

	ft_sort_int_tab(tab, size);
	printf("Values are 7,3,5,1,9,11. Sorted: %d,%d,", tab[0], tab[1]);
	printf("%d,%d,%d,%d. Correct?\n", tab[2], tab[3], tab[4], tab[5]);
	return (0);
}
*/
